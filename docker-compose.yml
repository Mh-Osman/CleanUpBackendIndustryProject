services:
  db:
    image: postgres:15-alpine
    container_name: cleanupbackend_db
    env_file:
      - .env

    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - cleanup_network

  redis:
    image: redis:7-alpine
    container_name: cleanup_redis
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cleanup_network

  web:
    build: .
    container_name: cleanupbackend_web
    command: gunicorn --workers 3 --bind 0.0.0.0:8000 core.wsgi:application
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    expose:
      - "8000"
    ports:
      - "8081:8000"
    env_file:
      - .env
    environment:
      - DJANGO_ENV=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - cleanup_network

  celery:
    build: .
    container_name: cleanup_celery
    command: celery -A core worker --loglevel=info
    volumes:
      - media_files:/app/media
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - cleanup_network

  celery-beat:
    build: .
    container_name: cleanup_celery_beat
    command: celery -A core beat --loglevel=info
    volumes:
      - celery_beat_schedule:/app/schedule
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always
    networks:
      - cleanup_network
  # nginx:
  #   image: nginx:alpine
  #   container_name: cleanup_nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #     - static_files:/app/staticfiles
  #     - media_files:/app/media
  #   depends_on:
  #     web:
  #       condition: service_started
  #   restart: always
  #   networks:
  #     - cleanup_network
  # nginx:
  #   image: nginx:alpine
  #   container_name: cleanup_nginx
  #   ports:
  #     - "81:80"
  #     - "443:443" # <-- add HTTPS port
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #     - static_files:/app/staticfiles
  #     - media_files:/app/media
  #     - ./certbot/conf:/etc/letsencrypt # <-- SSL certificates
  #     - ./certbot/www:/var/www/certbot # <-- webroot for validation
  #   depends_on:
  #     web:
  #       condition: service_started
  #   restart: always
  #   networks:
  #     - cleanup_network
  # certbot:
  #   image: certbot/certbot
  #   container_name: cleanup_certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   entrypoint: >
  #     sh -c "trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot --quiet; done"
  #   restart: always
  #   networks:
  #     - cleanup_network

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:
  celery_beat_schedule:


networks:
  cleanup_network:
    driver: bridge
